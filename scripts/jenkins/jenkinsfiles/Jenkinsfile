@Library('test-shared-library') _

final String MODE_PR = 'MODE_PR'
final String MODE_MASTER = 'MODE_MASTER'
final String DEFAULT_POD_CONTAINER = 'h2o-3-container'

def defineTestStages = null
def pipelineContext = null
String result = 'FAILURE'
def scmEnv = null

final String buildPodYaml = """
apiVersion: v1
kind: Pod
metadata:
  name: h2o-3-small
spec:
  securityContext:
    runAsUser: 2117
    fsGroup: 2117
  containers:
  - args:
    - cat
    command:
    - /bin/sh
    - -c
    image: docker.h2o.ai/opsh2oai/h2o-3-runtime:108
    imagePullPolicy: Always
    name: h2o-3-container
    resources:
      limits:
        cpu: "8"
        memory: 20Gi
      requests:
        cpu: "8"
        memory: 20Gi
    securityContext:
      privileged: false
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    tty: true
    volumeMounts:
    - mountPath: /home/0xdiag
      name: volume-0
  imagePullSecrets:
  - name: regcred
  volumes:
  - hostPath:
      path: /home/0xdiag
      type: ""
    name: volume-0
"""

final boolean prJob = env.CHANGE_BRANCH || env.ghprbPullId
def mode = null

try {
  ansiColor('xterm') {
    timestamps {

      if (prJob) {
        echo "********* USING PR PIPELINE CONFIGURATION *********"
        if (!env.ghprbPullId) {
          // cancel previous builds only for regular PRs, don't cancel for external PRs
          cancelPreviousBuilds()
        }
        mode = MODE_PR
      } else {
        echo "********* USING MASTER PIPELINE CONFIGURATION *********"
        mode = MODE_MASTER
      }

      stage('Checkout and Build') {
        final def label = "h2o-3-pod-build-${UUID.randomUUID().toString()}"
        echo "######### NodeLabel: ${label} #########"
        podTemplate(label: label, name: 'h2o-3-pod-build', yaml: buildPodYaml) {
          node(label) {
            container(DEFAULT_POD_CONTAINER) {
              dir('h2o-3') {
                // clear the folder
                deleteDir()
                // checkout H2O-3
                  retryWithTimeout(60, 3) {
                      echo "###### Checkout H2O-3 ######"
                      if (env.ghprbPullId) {
                          // building PR from fork
                          sh """
                            git init
                            git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
                            git config remote.origin.url https://github.com/h2oai/h2o-3
        
                            git fetch --no-tags origin pull/${env.ghprbPullId}/head:remote-${env.ghprbSourceBranch}
                            git checkout ${env.ghprbActualCommit}
                            git checkout -b ${env.ghprbSourceBranch}
                          """
                          scmEnv = [
                                  GIT_BRANCH: env.ghprbSourceBranch,
                                  GIT_COMMIT: env.ghprbActualCommit,
                                  GIT_URL: 'https://github.com/h2oai/h2o-3'
                          ]
                          env.BUILDING_FORK = true
                      } else {
                          // building regular PR
                          scmEnv = checkout scm
                      }
                  }
              }

              if (pipelineContext == null) {
                def initPipelineContext = load('h2o-3/scripts/jenkins/groovy/initPipelineContext.groovy')
                pipelineContext = initPipelineContext(scmEnv, mode, !prJob)
                pipelineContext.getBuildConfig().setJobProperties(this)
                // Load the defineTestStages script
                defineTestStages = load('h2o-3/scripts/jenkins/groovy/defineTestStages.groovy')
              }
              // Load build script and execute it
              def buildH2O3 = load('h2o-3/scripts/jenkins/groovy/buildH2O3.groovy')
              buildH2O3(pipelineContext)
            }
          }
        }
      }

      defineTestStages(pipelineContext)
      result = 'SUCCESS'
    }
  }
} finally {
  if (pipelineContext != null) {
    if (!prJob) {
      pipelineContext.getEmailer().sendEmail(this, result, pipelineContext.getBuildSummary().getSummaryHTML(this))
    }
    if (!pipelineContext.getHealthChecker().getHealthProblems().isEmpty()) {
      pipelineContext.getEmailer().sendEmail(this, 'WARNING', pipelineContext.getHealthChecker().toEmail(this, pipelineContext), ['michalr@h2o.ai'])
    }
  }
}

def cancelPreviousBuilds() {
  echo "###### Cancelling all previous builds ######"
  def hi = Hudson.instance
  def pname = env.JOB_NAME.split('/')[0]

  hi.getItem(pname).getItem(env.JOB_BASE_NAME).getBuilds().each{ build ->
    def exec = build.getExecutor()

    if (build.number != currentBuild.number && exec != null) {
      exec.doStop()
      println("Aborted previous running build #${build.number}")
    }
  }
}
